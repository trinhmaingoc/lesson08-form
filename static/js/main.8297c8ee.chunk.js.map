{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onHandleChange","event","target","name","value","type","checked","setState","onHandleSubmit","preventDefault","console","log","state","username","password","description","gender","langue","status","className","onSubmit","this","onChange","rows","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qPA4IeA,G,MAzIf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,eAAiB,SAACC,GAChB,IAAMC,EAASD,EAAMC,OACfC,EAAOD,EAAOC,KACdC,EAAwB,aAAhBF,EAAOG,KAAsBH,EAAOI,QAAUJ,EAAOE,MACnE,EAAKG,SAAL,eACGJ,EAAOC,KAlBO,EAsBnBI,eAAiB,SAACP,GAChBA,EAAMQ,iBACNC,QAAQC,IAAI,EAAKC,QArBjB,EAAKA,MAAQ,CACXC,SAAU,GACVC,SAAU,GACVC,YAAa,GACbC,OAAQ,EACRC,OAAQ,UACRC,QAAQ,GATO,EADrB,qDA8BI,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,uCACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,eAAd,SAEF,yBAAKA,UAAU,cAEb,0BAAMC,SAAUC,KAAKb,gBACnB,yBAAKW,UAAU,cACb,2CACA,2BACEd,KAAK,OACLc,UAAU,eACVhB,KAAK,WACLC,MAAOiB,KAAKT,MAAMC,SAClBS,SAAUD,KAAKrB,kBAGnB,yBAAKmB,UAAU,cACb,2CACA,2BACEd,KAAK,OACLc,UAAU,eACVhB,KAAK,WACLC,MAAOiB,KAAKT,MAAME,SAClBQ,SAAUD,KAAKrB,kBAGnB,yBAAKmB,UAAU,cACb,gDACA,8BACEhB,KAAK,cACLgB,UAAU,eACVI,KAAK,IACLnB,MAAOiB,KAAKT,MAAMG,YAClBO,SAAUD,KAAKrB,kBAGnB,yBAAKmB,UAAU,cACb,oDACA,4BACEhB,KAAK,SACLgB,UAAU,eACVf,MAAOiB,KAAKT,MAAMI,OAClBM,SAAUD,KAAKrB,gBAEf,4BAAQI,MAAO,GAAf,WACA,4BAAQA,MAAO,GAAf,SAGJ,yBAAKe,UAAU,cACb,mDACA,yBAAKA,UAAU,SACb,+BACE,2BACEd,KAAK,QACLF,KAAK,SACLC,MAAM,UACNkB,SAAUD,KAAKrB,eACfM,QAA+B,YAAtBe,KAAKT,MAAMK,SANxB,WADF,IAUW,6BACT,+BACE,2BACEZ,KAAK,QACLF,KAAK,SACLC,MAAM,aACNkB,SAAUD,KAAKrB,eACfM,QAA+B,eAAtBe,KAAKT,MAAMK,SANxB,0BAYJ,yBAAKE,UAAU,cACb,yBAAKA,UAAU,YACb,+BACE,2BACEd,KAAK,WACLF,KAAK,SACLmB,SAAWD,KAAKrB,eAChBM,QAASe,KAAKT,MAAMM,SALxB,wBAaJ,4BAAQb,KAAK,SAASc,UAAU,mBAAhC,qBAnFF,QAoFE,4BAAQd,KAAK,QAAQc,UAAU,mBAA/B,+BA5HlB,GAAyBK,cCSLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a","file":"static/js/main.8297c8ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      username: '',\n      password: '',\n      description: '',\n      gender: 0,\n      langue: 'english',\n      status: false,\n    }\n  };\n\n  onHandleChange = (event) => {\n    const target = event.target;\n    const name = target.name;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  onHandleSubmit = (event) => {\n    event.preventDefault();\n    console.log(this.state);\n\n  };\n\n  render() {\n    return (\n      <div className=\"container mt-30\">\n        <div className=\"row\">\n          <div className=\"col-xs-8 col-sm-8 col-md-8 col-lg-8\">\n            <div className=\"panel panel-primary\">\n              <div className=\"panel-heading\">\n                <h3 className=\"panel-title\">Form</h3>\n              </div>\n              <div className=\"panel-body\">\n\n                <form onSubmit={this.onHandleSubmit} >\n                  <div className=\"form-group\">\n                    <label>Username</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"username\"\n                      value={this.state.username}\n                      onChange={this.onHandleChange}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Password</label>\n                    <input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"password\"\n                      value={this.state.password}\n                      onChange={this.onHandleChange}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Mô Tả</label>\n                    <textarea\n                      name=\"description\"\n                      className=\"form-control\"\n                      rows=\"3\"\n                      value={this.state.description}\n                      onChange={this.onHandleChange}>\n                    </textarea>\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Giới Tính</label>\n                    <select \n                      name=\"gender\" \n                      className=\"form-control\" \n                      value={this.state.gender} \n                      onChange={this.onHandleChange}\n                    >\n                      <option value={0}>Nữ</option>\n                      <option value={1}>Nam</option>\n                    </select>\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Ngôn Ngữ</label>\n                    <div className=\"radio\">\n                      <label>\n                        <input \n                          type=\"radio\" \n                          name=\"langue\" \n                          value=\"english\" \n                          onChange={this.onHandleChange}\n                          checked={this.state.langue === \"english\"} \n                        />\n                        English\n                      </label> <br />\n                      <label>\n                        <input \n                          type=\"radio\" \n                          name=\"langue\" \n                          value=\"vietnamese\" \n                          onChange={this.onHandleChange}\n                          checked={this.state.langue === \"vietnamese\"}  \n                        />\n                        Tiếng Việt\n                      </label>\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <div className=\"checkbox\">\n                      <label>\n                        <input \n                          type=\"checkbox\"\n                          name=\"status\"\n                          onChange={ this.onHandleChange }\n                          checked={this.state.status}\n                        />\n                        Trạng Thái\n                      </label>\n                    </div>\n                    \n                  </div>\n\n                  <button type=\"submit\" className=\"btn btn-primary\">Lưu Lại</button> &nbsp;\n                  <button type=\"reset\" className=\"btn btn-default\">Xóa Trắng</button>\n                </form>\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}